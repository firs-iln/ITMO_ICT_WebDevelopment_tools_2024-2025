{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0410\u0432\u0442\u043e\u0440: \u0424\u0438\u0440\u0441\u043e\u0432 \u0418\u043b\u044c\u044f 367588 \u0413\u0440\u0443\u043f\u043f\u0430: K3341","title":"Home"},{"location":"#_1","text":"\u0410\u0432\u0442\u043e\u0440: \u0424\u0438\u0440\u0441\u043e\u0432 \u0418\u043b\u044c\u044f 367588 \u0413\u0440\u0443\u043f\u043f\u0430: K3341","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 9 \u0411\u0430\u043b\u043b\u043e\u0432: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0438\u0437 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 FastAPI. \u041e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f: \u0422\u0430\u0431\u043b\u0438\u0446\u044b, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ORM SQLAlchemy \u0438\u043b\u0438 SQLModel \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0411\u0414 PostgreSQL. API, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 CRUD-\u044b. \u0422\u0430\u043c \u0433\u0434\u0435 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 (\u0441\u0432\u044f\u0437\u0438 many-to-many \u0438 one-to-many). \u041d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Alembic. \u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044e \u0442\u0438\u043f\u043e\u0432 \u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445 \u0432 API-\u043c\u0435\u0442\u043e\u0434\u0430\u0445. \u041e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u043d\u0443\u044e \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u0434\u0430, \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0437\u0430 \u0440\u0430\u0437\u043d\u0443\u044e \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443 \u0438 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c, \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0438 \u043f\u0430\u043f\u043a\u0438. (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043a \u0441\u043b\u043e\u0436\u043d\u044b\u043c \u0447\u0430\u0441\u0442\u044f\u043c \u043a\u043e\u0434\u0430. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 15 \u0411\u0430\u043b\u043b\u043e\u0432 (\u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0441\u0440\u0430\u0437\u0443): \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f: - \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e - \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e JWT-\u0442\u043e\u043a\u0435\u043d\u043e\u0432 - \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT-\u0442\u043e\u043a\u0435\u043d\u0443 - \u0425\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u0435\u0439 - \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0410\u041f\u0418-\u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0441\u043c\u0435\u043d\u0435 \u043f\u0430\u0440\u043e\u043b\u044f \u042f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e \u0441\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043a\u0430\u043a \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 15 \u0431\u0430\u043b\u043b\u043e\u0432. \u041f\u0440\u043e\u0435\u043a\u0442 \u2014 \u0430\u0434\u043c\u0438\u043d-\u043f\u0430\u043d\u0435\u043b\u044c \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u0435\u043d\u043d\u0438\u0441\u043d\u044b\u0445 \u043a\u043e\u0440\u0442\u043e\u0432. \u0421\u0435\u0440\u0432\u0438\u0441 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u0441\u0442\u0430\u0434\u0438\u0438 go2market. \u0410\u0434\u043c\u0438\u043d-\u043f\u0430\u043d\u0435\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 CMS \u0438 CRM, \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 2 \u0411\u0414, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e: - FastAPI - SQLAlchemy - pydantic - alembic \u0424\u0430\u0439\u043b\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430: tree -I .venv -I __pycache__ . \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 abstractions \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 repositories \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 abstract.py \u2502 \u2502 \u251c\u2500\u2500 booking_schedule.py \u2502 \u2502 \u251c\u2500\u2500 court_organisation.py \u2502 \u2502 \u251c\u2500\u2500 role.py \u2502 \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u2502 \u251c\u2500\u2500 unicort \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 abstract.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 booking.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 court.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 court_organization.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 game_order.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 user.py \u2502 \u2502 \u251c\u2500\u2500 user.py \u2502 \u2502 \u2514\u2500\u2500 user_comment.py \u2502 \u2514\u2500\u2500 services \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 service.py \u2502 \u2502 \u2514\u2500\u2500 tokens.py \u2502 \u251c\u2500\u2500 booking.py \u2502 \u251c\u2500\u2500 court.py \u2502 \u251c\u2500\u2500 exceptions.py \u2502 \u251c\u2500\u2500 permission.py \u2502 \u251c\u2500\u2500 role.py \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u251c\u2500\u2500 unicort \u2502 \u2502 \u251c\u2500\u2500 backend \u2502 \u2502 \u2502 \u2514\u2500\u2500 service.py \u2502 \u2502 \u251c\u2500\u2500 court_organisation.py \u2502 \u2502 \u2514\u2500\u2500 user.py \u2502 \u2514\u2500\u2500 user.py \u251c\u2500\u2500 alembic.ini \u251c\u2500\u2500 dependencies \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 repositories \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 court.py \u2502 \u2502 \u251c\u2500\u2500 roles.py \u2502 \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u2502 \u251c\u2500\u2500 sessionmaker.py \u2502 \u2502 \u251c\u2500\u2500 unicort \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 booking.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 court.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 court_organization.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 game_order.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 sessionmaker.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 user.py \u2502 \u2502 \u251c\u2500\u2500 user.py \u2502 \u2502 \u2514\u2500\u2500 user_comments.py \u2502 \u2514\u2500\u2500 services \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 service.py \u2502 \u2502 \u2514\u2500\u2500 token.py \u2502 \u251c\u2500\u2500 booking.py \u2502 \u251c\u2500\u2500 organisation.py \u2502 \u251c\u2500\u2500 role.py \u2502 \u251c\u2500\u2500 unicort \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 backend \u2502 \u2502 \u2502 \u2514\u2500\u2500 service.py \u2502 \u2502 \u251c\u2500\u2500 permission.py \u2502 \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u2502 \u2514\u2500\u2500 user.py \u2502 \u2514\u2500\u2500 user.py \u251c\u2500\u2500 domain \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 dto \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 abstract.py \u2502 \u2502 \u251c\u2500\u2500 auth.py \u2502 \u2502 \u251c\u2500\u2500 court.py \u2502 \u2502 \u251c\u2500\u2500 role.py \u2502 \u2502 \u251c\u2500\u2500 unicort \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 achievement.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 booking.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 booking_promocode.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 booking_schedule.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 city.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 court.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 court_dictionary.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 court_organization.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 court_review.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 district.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 friendship.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 game.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 game_history.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 game_order.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 game_result.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 game_score.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 game_score_result.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 game_user_result.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 interest.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 log.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 membership.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 notification.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 promocode.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 schedule_occupancy.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 user.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 user_achievement.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 user_booking.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 user_interest.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 user_promocode.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 user_review.py \u2502 \u2502 \u251c\u2500\u2500 user.py \u2502 \u2502 \u2514\u2500\u2500 user_comment.py \u2502 \u251c\u2500\u2500 filter \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 user.py \u2502 \u2514\u2500\u2500 models \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 absract.py \u2502 \u251c\u2500\u2500 court_organisation.py \u2502 \u251c\u2500\u2500 role.py \u2502 \u251c\u2500\u2500 unicort \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 achievement.py \u2502 \u2502 \u251c\u2500\u2500 booking.py \u2502 \u2502 \u251c\u2500\u2500 booking_promocode.py \u2502 \u2502 \u251c\u2500\u2500 booking_schedule.py \u2502 \u2502 \u251c\u2500\u2500 city.py \u2502 \u2502 \u251c\u2500\u2500 court.py \u2502 \u2502 \u251c\u2500\u2500 court_dictionary.py \u2502 \u2502 \u251c\u2500\u2500 court_organization.py \u2502 \u2502 \u251c\u2500\u2500 court_review.py \u2502 \u2502 \u251c\u2500\u2500 district.py \u2502 \u2502 \u251c\u2500\u2500 friendship.py \u2502 \u2502 \u251c\u2500\u2500 game.py \u2502 \u2502 \u251c\u2500\u2500 game_history.py \u2502 \u2502 \u251c\u2500\u2500 game_order.py \u2502 \u2502 \u251c\u2500\u2500 game_result.py \u2502 \u2502 \u251c\u2500\u2500 game_score.py \u2502 \u2502 \u251c\u2500\u2500 game_score_result.py \u2502 \u2502 \u251c\u2500\u2500 game_user_result.py \u2502 \u2502 \u251c\u2500\u2500 interest.py \u2502 \u2502 \u251c\u2500\u2500 log.py \u2502 \u2502 \u251c\u2500\u2500 membership.py \u2502 \u2502 \u251c\u2500\u2500 notification.py \u2502 \u2502 \u251c\u2500\u2500 promocode.py \u2502 \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u2502 \u251c\u2500\u2500 schedule_occupancy.py \u2502 \u2502 \u251c\u2500\u2500 user.py \u2502 \u2502 \u251c\u2500\u2500 user_achievement.py \u2502 \u2502 \u251c\u2500\u2500 user_booking.py \u2502 \u2502 \u251c\u2500\u2500 user_interest.py \u2502 \u2502 \u251c\u2500\u2500 user_promocode.py \u2502 \u2502 \u2514\u2500\u2500 user_review.py \u2502 \u251c\u2500\u2500 user.py \u2502 \u2514\u2500\u2500 user_comment.py \u251c\u2500\u2500 infrastructure \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin_db \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 entities.py \u2502 \u2502 \u251c\u2500\u2500 migrations.py \u2502 \u2502 \u251c\u2500\u2500 repositories \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 abstract.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 court.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 role.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 user.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 user_comment.py \u2502 \u2502 \u2514\u2500\u2500 seed.py \u2502 \u251c\u2500\u2500 main_db \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 entities.py \u2502 \u2502 \u251c\u2500\u2500 enums.py \u2502 \u2502 \u2514\u2500\u2500 reposiotries \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 abstract.py \u2502 \u2502 \u251c\u2500\u2500 achievement.py \u2502 \u2502 \u251c\u2500\u2500 booking.py \u2502 \u2502 \u251c\u2500\u2500 booking_promocode.py \u2502 \u2502 \u251c\u2500\u2500 booking_schedule.py \u2502 \u2502 \u251c\u2500\u2500 city.py \u2502 \u2502 \u251c\u2500\u2500 court.py \u2502 \u2502 \u251c\u2500\u2500 court_dictionary.py \u2502 \u2502 \u251c\u2500\u2500 court_organization.py \u2502 \u2502 \u251c\u2500\u2500 court_review.py \u2502 \u2502 \u251c\u2500\u2500 district.py \u2502 \u2502 \u251c\u2500\u2500 friendship.py \u2502 \u2502 \u251c\u2500\u2500 game.py \u2502 \u2502 \u251c\u2500\u2500 game_history.py \u2502 \u2502 \u251c\u2500\u2500 game_order.py \u2502 \u2502 \u251c\u2500\u2500 game_result.py \u2502 \u2502 \u251c\u2500\u2500 game_score.py \u2502 \u2502 \u251c\u2500\u2500 game_score_result.py \u2502 \u2502 \u251c\u2500\u2500 game_user_result.py \u2502 \u2502 \u251c\u2500\u2500 interest.py \u2502 \u2502 \u251c\u2500\u2500 log.py \u2502 \u2502 \u251c\u2500\u2500 membership.py \u2502 \u2502 \u251c\u2500\u2500 notification.py \u2502 \u2502 \u251c\u2500\u2500 promocode.py \u2502 \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u2502 \u251c\u2500\u2500 schedule_occupancy.py \u2502 \u2502 \u251c\u2500\u2500 user.py \u2502 \u2502 \u251c\u2500\u2500 user_achievement.py \u2502 \u2502 \u251c\u2500\u2500 user_booking.py \u2502 \u2502 \u251c\u2500\u2500 user_interest.py \u2502 \u2502 \u251c\u2500\u2500 user_promocode.py \u2502 \u2502 \u2514\u2500\u2500 user_review.py \u2502 \u2514\u2500\u2500 sqlalchemy \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 exceptions.py \u2502 \u2514\u2500\u2500 repository.py \u251c\u2500\u2500 main.py \u251c\u2500\u2500 middlewares \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 auth_middleware.py \u2502 \u2514\u2500\u2500 exception_middleware.py \u251c\u2500\u2500 migrations \u2502 \u251c\u2500\u2500 README \u2502 \u251c\u2500\u2500 env.py \u2502 \u251c\u2500\u2500 script.py.mako \u2502 \u2514\u2500\u2500 versions \u2502 \u251c\u2500\u2500 31e91d22258f_organisation_rename.py \u2502 \u251c\u2500\u2500 53f27d362428_init.py \u2502 \u251c\u2500\u2500 8ffaf9a5b8c3_roles_refactor.py \u2502 \u251c\u2500\u2500 96f3c84e7a54_add_usercomment.py \u2502 \u251c\u2500\u2500 97abc6892cea_court_organization.py \u2502 \u2514\u2500\u2500 f5af50aded46_rename_court_to_organization.py \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 routes \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 auth.py \u2502 \u251c\u2500\u2500 organisation \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 court.py \u2502 \u251c\u2500\u2500 requests \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 booking.py \u2502 \u2502 \u251c\u2500\u2500 change_role.py \u2502 \u2502 \u251c\u2500\u2500 court.py \u2502 \u2502 \u251c\u2500\u2500 organization.py \u2502 \u2502 \u251c\u2500\u2500 role.py \u2502 \u2502 \u2514\u2500\u2500 user.py \u2502 \u251c\u2500\u2500 responses \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 booking.py \u2502 \u2502 \u251c\u2500\u2500 court.py \u2502 \u2502 \u251c\u2500\u2500 organisation.py \u2502 \u2502 \u251c\u2500\u2500 role.py \u2502 \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u2502 \u2514\u2500\u2500 user.py \u2502 \u251c\u2500\u2500 roles.py \u2502 \u251c\u2500\u2500 unicort \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 booking.py \u2502 \u2502 \u251c\u2500\u2500 organisation.py \u2502 \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u2502 \u2514\u2500\u2500 users.py \u2502 \u251c\u2500\u2500 user.py \u2502 \u2514\u2500\u2500 utils \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 schema_check.py \u251c\u2500\u2500 services \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 auth.py \u2502 \u251c\u2500\u2500 exceptions.py \u2502 \u251c\u2500\u2500 organisation.py \u2502 \u251c\u2500\u2500 permission.py \u2502 \u251c\u2500\u2500 role.py \u2502 \u251c\u2500\u2500 token.py \u2502 \u251c\u2500\u2500 unicort \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 backend \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 requests \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 booking.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 service.py \u2502 \u2502 \u251c\u2500\u2500 booking.py \u2502 \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u2502 \u2514\u2500\u2500 user.py \u2502 \u2514\u2500\u2500 user.py \u251c\u2500\u2500 settings \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin_db.py \u2502 \u251c\u2500\u2500 backend.py \u2502 \u251c\u2500\u2500 core_db.py \u2502 \u251c\u2500\u2500 db.py \u2502 \u251c\u2500\u2500 jwt.py \u2502 \u251c\u2500\u2500 merged_source.py \u2502 \u2514\u2500\u2500 service_user.py \u2514\u2500\u2500 settings.json 41 directories, 257 files SQLAlchemy \u0410\u0434\u043c\u0438\u043d-\u043f\u0430\u043d\u0435\u043b\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 2 \u0411\u0414: core : postgres, \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u0431\u0435\u043a\u0435\u043d\u0434\u043e\u043c; \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f, \u043d\u043e \u043e\u0447\u0435\u043d\u044c \u043e\u0431\u0448\u0438\u0440\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f relationship admin : postgres, \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0431\u043e\u0437\u0440\u0435\u0432\u0430\u0435\u043c\u044b\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u043c, \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 alembic \u041e\u0431\u0435 \u2014 DBaaS Yandex.Cloud \u0438 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 SSL \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0411\u0414: import ssl from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker from settings import settings __all__ = [ \"session_maker\", ] ssl_context = ssl.create_default_context(cafile=\"/app/.postgresql/root.crt\") # todo: change \"/app\" -> \".\" for migrations ssl_context.check_hostname = True ssl_context.verify_mode = ssl.CERT_REQUIRED connect_args = {\"ssl\": ssl_context} engine = create_async_engine(settings.admin_db.url, echo=False, pool_recycle=1800, pool_timeout=30) session_maker = async_sessionmaker(engine, expire_on_commit=False) \u0421\u0443\u0449\u043d\u043e\u0441\u0442\u0438 core \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043f\u043e \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0443 DB-first , \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u043d\u0438 \u0441\u043a\u0443\u0447\u043d\u044b\u0435, \u0440\u0430\u0437\u0431\u0435\u0440\u0435\u043c admin \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439: Base = declarative_base() class AbstractBase(Base): __abstract__ = True id: Mapped[pyUUID] = mapped_column(UUID(as_uuid=True), primary_key=True) created_at: Mapped[datetime] = mapped_column( TIMESTAMP, server_default=func.now(), ) updated_at: Mapped[datetime] = mapped_column( TIMESTAMP, server_default=func.now(), onupdate=func.current_timestamp(), ) \u0421\u0443\u0449\u043d\u043e\u0441\u0442\u0438: class User(AbstractBase): __tablename__ = \"users\" email: Mapped[Optional[str]] username: Mapped[str] = mapped_column(unique=True) hashed_password: Mapped[str] organisation_id: Mapped[Optional[pyUUID]] = mapped_column(ForeignKey('courts_organisation.id')) role_id: Mapped[Optional[pyUUID]] = mapped_column(ForeignKey('roles.id')) is_active: Mapped[bool] role: Mapped[Optional['Role']] = relationship(\"Role\", back_populates='users') court_organisation: Mapped[Optional['Organisation']] = relationship(\"Organisation\", back_populates='users') class Organisation(AbstractBase): __tablename__ = \"courts_organisation\" unicort_organization_id: Mapped[int] = mapped_column(unique=True) is_active: Mapped[bool] creator_id: Mapped[pyUUID] users: Mapped[List[User]] = relationship('User', back_populates='court_organisation') class Role(AbstractBase): __tablename__ = \"roles\" name: Mapped[str] description: Mapped[str] court_organisation_id: Mapped[Optional[pyUUID]] = mapped_column(ForeignKey('courts_organisation.id')) permissions: Mapped[dict] = mapped_column(JSONB) is_unicort_staff: Mapped[bool] = mapped_column(default=False) is_superuser: Mapped[bool] = mapped_column(default=False) creator_id: Mapped[Optional[pyUUID]] users: Mapped[List[User]] = relationship(\"User\", back_populates='role') alembic \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e alembic \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439, \u043d\u043e \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0442\u0435 \u0436\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u0447\u0442\u043e \u0438 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435. \u041a\u043e\u043d\u0435\u0447\u043d\u043e, \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0445\u043e\u0441\u0442\u0430/\u043f\u043e\u0440\u0442\u0430/etc, \u043d\u043e \u044d\u0442\u043e \u0441\u043a\u0443\u0447\u043d\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 env.py \u0441 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c alembic \u0441 asyncpg \u0432\u043c\u0435\u0441\u0442\u043e psychopg2 import asyncio from logging.config import fileConfig from alembic import context from sqlalchemy import pool from sqlalchemy.engine import Connection from sqlalchemy.ext.asyncio import async_engine_from_config from infrastructure.admin_db.entities import Base from settings import settings # this is the Alembic Config object, which provides # access to the values within the .ini file in use. config = context.config # Interpret the config file for Python logging. # This line sets up loggers basically. if config.config_file_name is not None: fileConfig(config.config_file_name) # add your model's MetaData object here # for 'autogenerate' support # from myapp import mymodel # target_metadata = mymodel.Base.metadata target_metadata = Base.metadata # other values from the config, defined by the needs of env.py, # can be acquired: # my_important_option = config.get_main_option(\"my_important_option\") # ... etc. config.set_main_option(\"sqlalchemy.url\", settings.admin_db.url) def run_migrations_offline() -> None: \"\"\"Run migrations in 'offline' mode. This configures the context with just a URL and not an Engine, though an Engine is acceptable here as well. By skipping the Engine creation we don't even need a DBAPI to be available. Calls to context.execute() here emit the given string to the script output. \"\"\" url = config.get_main_option(\"sqlalchemy.url\") context.configure( url=url, target_metadata=target_metadata, literal_binds=True, dialect_opts={\"paramstyle\": \"named\"}, ) with context.begin_transaction(): context.run_migrations() def do_run_migrations(connection: Connection) -> None: context.configure(connection=connection, target_metadata=target_metadata) with context.begin_transaction(): context.run_migrations() async def run_async_migrations() -> None: \"\"\"In this scenario we need to create an Engine and associate a connection with the context. \"\"\" connectable = async_engine_from_config( config.get_section(config.config_ini_section, {}), prefix=\"sqlalchemy.\", poolclass=pool.NullPool, ) async with connectable.connect() as connection: await connection.run_sync(do_run_migrations) await connectable.dispose() def run_migrations_online() -> None: \"\"\"Run migrations in 'online' mode.\"\"\" asyncio.run(run_async_migrations()) if context.is_offline_mode(): run_migrations_offline() else: run_migrations_online() \u0422\u0430\u043a\u0436\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0441\u0438\u0434\u0430\u043c\u0438 import logging import subprocess logger = logging.getLogger(__name__) async def apply_migrations(): migrations_is_ok = subprocess.call([\"alembic\", \"upgrade\", \"head\"]) == 0 if not migrations_is_ok: logger.error(\"There is an error while upgrading database\") exit(1) API \u0412\u0441\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0432 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0430\u043d\u043d\u043e\u0442\u0438\u0440\u0443\u044e\u0442\u0441\u044f Pydantic-\u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438, \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 swagger \u043d\u0430\u043c \u043a\u0440\u0430\u0439\u043d\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u044f \u043d\u0435 \u0445\u043e\u0447\u0443 \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432\u0441\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430 \u0443\u0441\u0442\u043d\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u044b \u043e\u0442\u0432\u0435\u0442\u043e\u0432. \u0422\u0430\u043a\u0436\u0435 \u043c\u044b \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c camelCase \u0434\u043b\u044f \u043b\u044e\u0431\u043e\u0433\u043e \u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0431\u0435\u043a\u0435\u043d\u0434\u0430 \u0438 \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439 \u0441 Field(alias='...') \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: class UserResponse(BaseModel): id: UUID email: Optional[str] = None username: str organisation_id: Optional[UUID] = Field(None, serialization_alias='organisationId') organisation_name: Optional[str] = Field(None, serialization_alias='organisationName') is_active: bool = Field(..., serialization_alias='isActive') role: Optional[RoleResponse] = None created_at: datetime = Field(..., serialization_alias='createdAt') updated_at: datetime = Field(..., serialization_alias='updatedAt') model_config = ConfigDict(from_attributes=True, populate_by_name=True) \u0420\u0443\u0447\u0435\u043a \u0443 \u043d\u0430\u0441 \u043c\u043d\u043e\u0433\u043e, \u0442\u0430\u043a \u0447\u0442\u043e \u043f\u043e\u043a\u0430\u0436\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430: router = APIRouter( prefix=\"/user\", tags=[\"Users\"], ) logger = logging.getLogger(__name__) @router.get('/me') async def get_me(request: Request) -> UserResponse: user_id = get_user_id_from_request(request) user_service = get_user_service() return UserResponse.model_validate(await user_service.get_me(user_id=user_id)) @router.post('/create') async def create_user( request: Request, new_user: CreateUserRequest, ) -> Annotated[str, 'new user password']: user_id = get_user_id_from_request(request) permission_service = get_permission_service() court = await permission_service.check_create_users_permission(user_id, new_user) user_service = get_user_service() return await user_service.create_user( court_id=court.id if court else None, user=new_user, ) @router.get('/{user_id}') async def get_user( request: Request, user_id: UUID, ) -> UserResponse: request_user_id = get_user_id_from_request(request) permission_service = get_permission_service() organisation = await permission_service.check_get_users_permission(request_user_id) user_service = get_user_service() user = await user_service.get_user( organisation_id=organisation.id if organisation else None, user_id=user_id, ) return UserResponse.model_validate(user) @router.get('') async def get_users( request: Request, page: int = 1, size: int = 10, user_filter: UserFilter = FilterDepends(UserFilter) ) -> List[UserResponse]: request_user_id = get_user_id_from_request(request) permission_service = get_permission_service() organisation = await permission_service.check_get_users_permission(request_user_id) user_service = get_user_service() users = await user_service.get_users( organisation_id=organisation.id if organisation else None, page=page, size=size, user_filter=user_filter ) return [UserResponse.model_validate(user) for user in users] \u0412 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0430\u0442\u0442\u0435\u0440\u043d \"\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439\", \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u0438\u0440\u0443\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u0411\u0414. \u0422\u0430\u043a, \u0432\u0441\u0435 reationship -\u043f\u043e\u043b\u044f \u043c\u0430\u043f\u043f\u044f\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 pydantic -\u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u043b\u043e\u044f \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0435\u0432. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0435\u0441\u0442\u044c \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438, \u043a\u043e\u0433\u0434\u0430 \u0432 \u043e\u0442\u0432\u0435\u0442\u0435 API \u043d\u0443\u0436\u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0438\u0437 \u043e\u0431\u0435\u0438\u0445 \u0411\u0414/\u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430. \u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043b\u043e\u0436\u0438\u0442\u0441\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0438\u0441\u043d\u044b\u0439 \u0441\u043b\u043e\u0439. \u041f\u0440\u0438\u043c\u0435\u0440: class UnicortBookingResponse(BaseModel): id: int booking_time: datetime = Field(..., serialization_alias='bookingTime') date: Optional[pydate] = None price: float payment_link: Optional[str] = Field(None, serialization_alias='paymentLink') payment_id: Optional[str] = Field(None, serialization_alias='paymentId') order_id: Optional[int] = Field(None, serialization_alias='orderId') booked_by: Annotated[ BookedBy, Field(..., serialization_alias='bookedBy'), EnumNameSerializer ] status: Annotated[Optional[BookingStatus], EnumNameSerializer] = None promocode_id: Optional[int] = Field(None, serialization_alias='promocodeId') organisation_name: str = Field(..., serialization_alias='organisationName') start_time: time = Field(..., serialization_alias='startTime') end_time: time = Field(..., serialization_alias='endTime') users: List[BookingUserResponse] booked_by_user: Optional[BookingUserResponse] = Field(None, serialization_alias='bookedByUser') court_info: Optional[CourtResponse] = Field(None, serialization_alias='courtInfo') model_config = ConfigDict(from_attributes=True, populate_by_name=True) @router.get('/actual') async def get_actual_bookings( request: Request, ) -> list[UnicortBookingResponse]: user_id = get_user_id_from_request(request) permission_service = get_permission_service() court = await permission_service.check_get_bookings_permission(user_id) booking_service = get_booking_service() return await booking_service.get_actual_booking(court, user_id) class UnicortBookingService(UnicortBookingServiceInterface): async def get_actual_booking( self, court: Organisation, user_id: UUID, ) -> list[UnicortBookingResponse]: responses = [] if not court: booking_info = await self.bookings_repository.get_actual_booking() for booking in booking_info: booking_response = self._map_admin_booking(booking) responses.append(booking_response) return responses courts_ids = await self.court_organization_repository.get_courts(court.unicort_organization_id) booking_info = await self.bookings_repository.get_actual_booking_by_court_ids(courts_ids) for booking in booking_info: booking_response = self._map_unicort_booking(booking) responses.append(booking_response) return responses @staticmethod def _map_unicort_booking(booking: Booking) -> UnicortBookingResponse: logger.info(booking.schedules) start_time = min(map(lambda x: x.start_time, booking.schedules)) end_time = max(map(lambda x: x.end_time, booking.schedules)) return UnicortBookingResponse( id=booking.id, booking_time=booking.booking_time, date=booking.date.date(), price=booking.price, payment_link=booking.payment_link, payment_id=booking.payment_id, order_id=booking.order_id, booked_by=booking.booked_by, status=booking.status, promocode_id=booking.promocode_id, users=[ BookingUserResponse.model_validate(user) for user in booking.invited_users or [] ], booked_by_user=BookingUserResponse.model_validate(booking.creator) if booking.creator else None, court_info=CourtResponse.model_validate(booking.schedules[0].court), start_time=start_time, end_time=end_time, organisation_name=booking.court.organisation.name, ) AUTH \u0425\u0435\u0448\u0438\u0440\u0443\u0435\u043c \u043f\u0430\u0440\u043e\u043b\u0438 \u0441 argon2, \u043a\u0440\u0435\u0434\u044b - \u043b\u043e\u0433\u0438\u043d + \u043f\u0430\u0440\u043e\u043b\u044c. \u0422\u0430\u043a \u043a\u0430\u043a \u0440\u0435\u0441\u0443\u0440\u0441 \u043d\u0435\u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0439, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c. \u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0432 \u043e\u0442\u0432\u0435\u0442\u0435, \u0441\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f \u0435\u0449\u0435 \u043d\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 import logging from fastapi import APIRouter, Header, HTTPException from abstractions.services.exceptions import ( NoSuchUserException, WrongCredentialsException, InvalidTokenException, ExpiredTokenException ) from dependencies.services.auth import get_auth_service from domain.dto.auth import AuthTokens, Credentials router = APIRouter( prefix=\"/auth\", tags=[\"Auth\"], ) logger = logging.getLogger(__name__) @router.post('/signin') async def sign_in( credentials: Credentials, ) -> AuthTokens: auth_service = get_auth_service() try: tokens = await auth_service.create_token(credentials) return tokens except (NoSuchUserException, WrongCredentialsException): raise HTTPException(status_code=401, detail=\"\u041e\u0448\u0438\u0431\u043a\u0430: \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c\") @router.post('/refresh') async def refresh_tokens( refresh_token: str = Header(alias='X-Refresh-Token'), ) -> AuthTokens: if not refresh_token: raise HTTPException(status_code=401, detail='No refresh token provided') auth_service = get_auth_service() try: new_tokens = await auth_service.refresh_token(refresh_token) return new_tokens except (InvalidTokenException, NoSuchUserException, ExpiredTokenException) as e: code, detail = 401, 'Unknown authorization exception' match e: case InvalidTokenException(): detail = 'Refresh token is invalid' case ExpiredTokenException(): detail = 'Refresh token is expired' case NoSuchUserException(): detail = 'User ID found by refresh token does not exist' logger.info(detail) raise HTTPException(status_code=code, detail=detail) import random import string from dataclasses import dataclass from uuid import UUID from passlib.hash import argon2 from abstractions.repositories.user import UserRepositoryInterface from abstractions.services.auth.service import AuthServiceInterface from abstractions.services.auth.tokens import TokenServiceInterface from abstractions.services.exceptions import ( NoSuchUserException, WrongCredentialsException, ExpiredTokenException, InvalidTokenException, ) from domain.dto.auth import AuthTokens, Credentials from infrastructure.sqlalchemy.exceptions import NotFoundException @dataclass class AuthService(AuthServiceInterface): token_service: TokenServiceInterface user_repository: UserRepositoryInterface async def get_user_id_from_jwt(self, token: str) -> UUID: claims = self.token_service.get_token_payload(token) user_id = claims.get('sub') if not user_id: raise InvalidTokenException try: user = await self.user_repository.get(user_id) except NotFoundException: raise NoSuchUserException if not user.is_active: raise PermissionError(\"Your account has been disabled.\") return user.id async def create_token(self, credentials: Credentials) -> AuthTokens: user = await self.user_repository.get_by_username(username=credentials.username) if not user: raise NoSuchUserException if not self.verify_password(credentials.password, user.hashed_password): raise WrongCredentialsException return self.token_service.create_auth_token(user) async def refresh_token(self, refresh_token: str) -> AuthTokens: try: claims = self.token_service.get_token_payload(refresh_token) user_id = claims.get('sub') if not user_id: raise InvalidTokenException user = await self.user_repository.get(user_id) return self.token_service.create_auth_token(user) except (ExpiredTokenException, InvalidTokenException, NotFoundException): raise InvalidTokenException @staticmethod def hash_password(password: str) -> str: \"\"\" \u0425\u0435\u0448\u0438\u0440\u0443\u0435\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Argon2. :param password: \u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043b\u044f \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. :return: \u0417\u0430\u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c. \"\"\" return argon2.using(rounds=4).hash(password) @staticmethod def verify_password(password: str, hashed_password: str) -> bool: \"\"\" \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u043f\u0440\u043e\u0442\u0438\u0432 \u0437\u0430\u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. :param password: \u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438. :param hashed_password: \u0417\u0430\u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c. :return: True, \u0435\u0441\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439, \u0438\u043d\u0430\u0447\u0435 False. \"\"\" return argon2.verify(password, hashed_password) @staticmethod def generate_password(length: int = 12) -> str: if length < 4: raise ValueError(\"\u0414\u043b\u0438\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 4 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0434\u043b\u044f \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438.\") # \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 categories = [ random.choice(string.ascii_lowercase), # \u041e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u0447\u043d\u0430\u044f \u0431\u0443\u043a\u0432\u0430 random.choice(string.ascii_uppercase), # \u041e\u0434\u043d\u0430 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u0430\u044f \u0431\u0443\u043a\u0432\u0430 random.choice(string.digits), # \u041e\u0434\u043d\u0430 \u0446\u0438\u0444\u0440\u0430 random.choice(string.punctuation) # \u041e\u0434\u0438\u043d \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b ] # \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0438\u0437 \u0432\u0441\u0435\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 all_characters = string.ascii_letters + string.digits + string.punctuation categories.extend(random.choice(all_characters) for _ in range(length - 4)) # \u041f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u0435\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0434\u043b\u044f \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f random.shuffle(categories) return ''.join(categories)","title":"Lab 1"},{"location":"lab1/#_1","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 9 \u0411\u0430\u043b\u043b\u043e\u0432: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0438\u0437 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 FastAPI. \u041e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f: \u0422\u0430\u0431\u043b\u0438\u0446\u044b, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ORM SQLAlchemy \u0438\u043b\u0438 SQLModel \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0411\u0414 PostgreSQL. API, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 CRUD-\u044b. \u0422\u0430\u043c \u0433\u0434\u0435 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 (\u0441\u0432\u044f\u0437\u0438 many-to-many \u0438 one-to-many). \u041d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Alembic. \u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044e \u0442\u0438\u043f\u043e\u0432 \u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445 \u0432 API-\u043c\u0435\u0442\u043e\u0434\u0430\u0445. \u041e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u043d\u0443\u044e \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u0434\u0430, \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0437\u0430 \u0440\u0430\u0437\u043d\u0443\u044e \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443 \u0438 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c, \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0438 \u043f\u0430\u043f\u043a\u0438. (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043a \u0441\u043b\u043e\u0436\u043d\u044b\u043c \u0447\u0430\u0441\u0442\u044f\u043c \u043a\u043e\u0434\u0430. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 15 \u0411\u0430\u043b\u043b\u043e\u0432 (\u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0441\u0440\u0430\u0437\u0443): \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f: - \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e - \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e JWT-\u0442\u043e\u043a\u0435\u043d\u043e\u0432 - \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT-\u0442\u043e\u043a\u0435\u043d\u0443 - \u0425\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u0435\u0439 - \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0410\u041f\u0418-\u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0441\u043c\u0435\u043d\u0435 \u043f\u0430\u0440\u043e\u043b\u044f \u042f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e \u0441\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043a\u0430\u043a \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 15 \u0431\u0430\u043b\u043b\u043e\u0432. \u041f\u0440\u043e\u0435\u043a\u0442 \u2014 \u0430\u0434\u043c\u0438\u043d-\u043f\u0430\u043d\u0435\u043b\u044c \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u0435\u043d\u043d\u0438\u0441\u043d\u044b\u0445 \u043a\u043e\u0440\u0442\u043e\u0432. \u0421\u0435\u0440\u0432\u0438\u0441 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u0441\u0442\u0430\u0434\u0438\u0438 go2market. \u0410\u0434\u043c\u0438\u043d-\u043f\u0430\u043d\u0435\u043b\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 CMS \u0438 CRM, \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 2 \u0411\u0414, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e: - FastAPI - SQLAlchemy - pydantic - alembic","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"lab1/#_2","text":"tree -I .venv -I __pycache__ . \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 abstractions \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 repositories \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 abstract.py \u2502 \u2502 \u251c\u2500\u2500 booking_schedule.py \u2502 \u2502 \u251c\u2500\u2500 court_organisation.py \u2502 \u2502 \u251c\u2500\u2500 role.py \u2502 \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u2502 \u251c\u2500\u2500 unicort \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 abstract.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 booking.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 court.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 court_organization.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 game_order.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 user.py \u2502 \u2502 \u251c\u2500\u2500 user.py \u2502 \u2502 \u2514\u2500\u2500 user_comment.py \u2502 \u2514\u2500\u2500 services \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 service.py \u2502 \u2502 \u2514\u2500\u2500 tokens.py \u2502 \u251c\u2500\u2500 booking.py \u2502 \u251c\u2500\u2500 court.py \u2502 \u251c\u2500\u2500 exceptions.py \u2502 \u251c\u2500\u2500 permission.py \u2502 \u251c\u2500\u2500 role.py \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u251c\u2500\u2500 unicort \u2502 \u2502 \u251c\u2500\u2500 backend \u2502 \u2502 \u2502 \u2514\u2500\u2500 service.py \u2502 \u2502 \u251c\u2500\u2500 court_organisation.py \u2502 \u2502 \u2514\u2500\u2500 user.py \u2502 \u2514\u2500\u2500 user.py \u251c\u2500\u2500 alembic.ini \u251c\u2500\u2500 dependencies \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 repositories \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 court.py \u2502 \u2502 \u251c\u2500\u2500 roles.py \u2502 \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u2502 \u251c\u2500\u2500 sessionmaker.py \u2502 \u2502 \u251c\u2500\u2500 unicort \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 booking.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 court.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 court_organization.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 game_order.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 sessionmaker.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 user.py \u2502 \u2502 \u251c\u2500\u2500 user.py \u2502 \u2502 \u2514\u2500\u2500 user_comments.py \u2502 \u2514\u2500\u2500 services \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 service.py \u2502 \u2502 \u2514\u2500\u2500 token.py \u2502 \u251c\u2500\u2500 booking.py \u2502 \u251c\u2500\u2500 organisation.py \u2502 \u251c\u2500\u2500 role.py \u2502 \u251c\u2500\u2500 unicort \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 backend \u2502 \u2502 \u2502 \u2514\u2500\u2500 service.py \u2502 \u2502 \u251c\u2500\u2500 permission.py \u2502 \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u2502 \u2514\u2500\u2500 user.py \u2502 \u2514\u2500\u2500 user.py \u251c\u2500\u2500 domain \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 dto \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 abstract.py \u2502 \u2502 \u251c\u2500\u2500 auth.py \u2502 \u2502 \u251c\u2500\u2500 court.py \u2502 \u2502 \u251c\u2500\u2500 role.py \u2502 \u2502 \u251c\u2500\u2500 unicort \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 achievement.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 booking.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 booking_promocode.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 booking_schedule.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 city.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 court.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 court_dictionary.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 court_organization.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 court_review.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 district.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 friendship.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 game.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 game_history.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 game_order.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 game_result.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 game_score.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 game_score_result.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 game_user_result.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 interest.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 log.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 membership.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 notification.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 promocode.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 schedule_occupancy.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 user.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 user_achievement.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 user_booking.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 user_interest.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 user_promocode.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 user_review.py \u2502 \u2502 \u251c\u2500\u2500 user.py \u2502 \u2502 \u2514\u2500\u2500 user_comment.py \u2502 \u251c\u2500\u2500 filter \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 user.py \u2502 \u2514\u2500\u2500 models \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 absract.py \u2502 \u251c\u2500\u2500 court_organisation.py \u2502 \u251c\u2500\u2500 role.py \u2502 \u251c\u2500\u2500 unicort \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 achievement.py \u2502 \u2502 \u251c\u2500\u2500 booking.py \u2502 \u2502 \u251c\u2500\u2500 booking_promocode.py \u2502 \u2502 \u251c\u2500\u2500 booking_schedule.py \u2502 \u2502 \u251c\u2500\u2500 city.py \u2502 \u2502 \u251c\u2500\u2500 court.py \u2502 \u2502 \u251c\u2500\u2500 court_dictionary.py \u2502 \u2502 \u251c\u2500\u2500 court_organization.py \u2502 \u2502 \u251c\u2500\u2500 court_review.py \u2502 \u2502 \u251c\u2500\u2500 district.py \u2502 \u2502 \u251c\u2500\u2500 friendship.py \u2502 \u2502 \u251c\u2500\u2500 game.py \u2502 \u2502 \u251c\u2500\u2500 game_history.py \u2502 \u2502 \u251c\u2500\u2500 game_order.py \u2502 \u2502 \u251c\u2500\u2500 game_result.py \u2502 \u2502 \u251c\u2500\u2500 game_score.py \u2502 \u2502 \u251c\u2500\u2500 game_score_result.py \u2502 \u2502 \u251c\u2500\u2500 game_user_result.py \u2502 \u2502 \u251c\u2500\u2500 interest.py \u2502 \u2502 \u251c\u2500\u2500 log.py \u2502 \u2502 \u251c\u2500\u2500 membership.py \u2502 \u2502 \u251c\u2500\u2500 notification.py \u2502 \u2502 \u251c\u2500\u2500 promocode.py \u2502 \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u2502 \u251c\u2500\u2500 schedule_occupancy.py \u2502 \u2502 \u251c\u2500\u2500 user.py \u2502 \u2502 \u251c\u2500\u2500 user_achievement.py \u2502 \u2502 \u251c\u2500\u2500 user_booking.py \u2502 \u2502 \u251c\u2500\u2500 user_interest.py \u2502 \u2502 \u251c\u2500\u2500 user_promocode.py \u2502 \u2502 \u2514\u2500\u2500 user_review.py \u2502 \u251c\u2500\u2500 user.py \u2502 \u2514\u2500\u2500 user_comment.py \u251c\u2500\u2500 infrastructure \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin_db \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 entities.py \u2502 \u2502 \u251c\u2500\u2500 migrations.py \u2502 \u2502 \u251c\u2500\u2500 repositories \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 abstract.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 court.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 role.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 user.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 user_comment.py \u2502 \u2502 \u2514\u2500\u2500 seed.py \u2502 \u251c\u2500\u2500 main_db \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 entities.py \u2502 \u2502 \u251c\u2500\u2500 enums.py \u2502 \u2502 \u2514\u2500\u2500 reposiotries \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 abstract.py \u2502 \u2502 \u251c\u2500\u2500 achievement.py \u2502 \u2502 \u251c\u2500\u2500 booking.py \u2502 \u2502 \u251c\u2500\u2500 booking_promocode.py \u2502 \u2502 \u251c\u2500\u2500 booking_schedule.py \u2502 \u2502 \u251c\u2500\u2500 city.py \u2502 \u2502 \u251c\u2500\u2500 court.py \u2502 \u2502 \u251c\u2500\u2500 court_dictionary.py \u2502 \u2502 \u251c\u2500\u2500 court_organization.py \u2502 \u2502 \u251c\u2500\u2500 court_review.py \u2502 \u2502 \u251c\u2500\u2500 district.py \u2502 \u2502 \u251c\u2500\u2500 friendship.py \u2502 \u2502 \u251c\u2500\u2500 game.py \u2502 \u2502 \u251c\u2500\u2500 game_history.py \u2502 \u2502 \u251c\u2500\u2500 game_order.py \u2502 \u2502 \u251c\u2500\u2500 game_result.py \u2502 \u2502 \u251c\u2500\u2500 game_score.py \u2502 \u2502 \u251c\u2500\u2500 game_score_result.py \u2502 \u2502 \u251c\u2500\u2500 game_user_result.py \u2502 \u2502 \u251c\u2500\u2500 interest.py \u2502 \u2502 \u251c\u2500\u2500 log.py \u2502 \u2502 \u251c\u2500\u2500 membership.py \u2502 \u2502 \u251c\u2500\u2500 notification.py \u2502 \u2502 \u251c\u2500\u2500 promocode.py \u2502 \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u2502 \u251c\u2500\u2500 schedule_occupancy.py \u2502 \u2502 \u251c\u2500\u2500 user.py \u2502 \u2502 \u251c\u2500\u2500 user_achievement.py \u2502 \u2502 \u251c\u2500\u2500 user_booking.py \u2502 \u2502 \u251c\u2500\u2500 user_interest.py \u2502 \u2502 \u251c\u2500\u2500 user_promocode.py \u2502 \u2502 \u2514\u2500\u2500 user_review.py \u2502 \u2514\u2500\u2500 sqlalchemy \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 exceptions.py \u2502 \u2514\u2500\u2500 repository.py \u251c\u2500\u2500 main.py \u251c\u2500\u2500 middlewares \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 auth_middleware.py \u2502 \u2514\u2500\u2500 exception_middleware.py \u251c\u2500\u2500 migrations \u2502 \u251c\u2500\u2500 README \u2502 \u251c\u2500\u2500 env.py \u2502 \u251c\u2500\u2500 script.py.mako \u2502 \u2514\u2500\u2500 versions \u2502 \u251c\u2500\u2500 31e91d22258f_organisation_rename.py \u2502 \u251c\u2500\u2500 53f27d362428_init.py \u2502 \u251c\u2500\u2500 8ffaf9a5b8c3_roles_refactor.py \u2502 \u251c\u2500\u2500 96f3c84e7a54_add_usercomment.py \u2502 \u251c\u2500\u2500 97abc6892cea_court_organization.py \u2502 \u2514\u2500\u2500 f5af50aded46_rename_court_to_organization.py \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 routes \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 auth.py \u2502 \u251c\u2500\u2500 organisation \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 court.py \u2502 \u251c\u2500\u2500 requests \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 booking.py \u2502 \u2502 \u251c\u2500\u2500 change_role.py \u2502 \u2502 \u251c\u2500\u2500 court.py \u2502 \u2502 \u251c\u2500\u2500 organization.py \u2502 \u2502 \u251c\u2500\u2500 role.py \u2502 \u2502 \u2514\u2500\u2500 user.py \u2502 \u251c\u2500\u2500 responses \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 booking.py \u2502 \u2502 \u251c\u2500\u2500 court.py \u2502 \u2502 \u251c\u2500\u2500 organisation.py \u2502 \u2502 \u251c\u2500\u2500 role.py \u2502 \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u2502 \u2514\u2500\u2500 user.py \u2502 \u251c\u2500\u2500 roles.py \u2502 \u251c\u2500\u2500 unicort \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 booking.py \u2502 \u2502 \u251c\u2500\u2500 organisation.py \u2502 \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u2502 \u2514\u2500\u2500 users.py \u2502 \u251c\u2500\u2500 user.py \u2502 \u2514\u2500\u2500 utils \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 schema_check.py \u251c\u2500\u2500 services \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 auth.py \u2502 \u251c\u2500\u2500 exceptions.py \u2502 \u251c\u2500\u2500 organisation.py \u2502 \u251c\u2500\u2500 permission.py \u2502 \u251c\u2500\u2500 role.py \u2502 \u251c\u2500\u2500 token.py \u2502 \u251c\u2500\u2500 unicort \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 backend \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 requests \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 booking.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 service.py \u2502 \u2502 \u251c\u2500\u2500 booking.py \u2502 \u2502 \u251c\u2500\u2500 schedule.py \u2502 \u2502 \u2514\u2500\u2500 user.py \u2502 \u2514\u2500\u2500 user.py \u251c\u2500\u2500 settings \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 admin_db.py \u2502 \u251c\u2500\u2500 backend.py \u2502 \u251c\u2500\u2500 core_db.py \u2502 \u251c\u2500\u2500 db.py \u2502 \u251c\u2500\u2500 jwt.py \u2502 \u251c\u2500\u2500 merged_source.py \u2502 \u2514\u2500\u2500 service_user.py \u2514\u2500\u2500 settings.json 41 directories, 257 files","title":"\u0424\u0430\u0439\u043b\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430:"},{"location":"lab1/#sqlalchemy","text":"\u0410\u0434\u043c\u0438\u043d-\u043f\u0430\u043d\u0435\u043b\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 2 \u0411\u0414: core : postgres, \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u0431\u0435\u043a\u0435\u043d\u0434\u043e\u043c; \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f, \u043d\u043e \u043e\u0447\u0435\u043d\u044c \u043e\u0431\u0448\u0438\u0440\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f relationship admin : postgres, \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0431\u043e\u0437\u0440\u0435\u0432\u0430\u0435\u043c\u044b\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u043c, \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 alembic \u041e\u0431\u0435 \u2014 DBaaS Yandex.Cloud \u0438 \u0442\u0440\u0435\u0431\u0443\u044e\u0442 SSL \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0411\u0414: import ssl from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker from settings import settings __all__ = [ \"session_maker\", ] ssl_context = ssl.create_default_context(cafile=\"/app/.postgresql/root.crt\") # todo: change \"/app\" -> \".\" for migrations ssl_context.check_hostname = True ssl_context.verify_mode = ssl.CERT_REQUIRED connect_args = {\"ssl\": ssl_context} engine = create_async_engine(settings.admin_db.url, echo=False, pool_recycle=1800, pool_timeout=30) session_maker = async_sessionmaker(engine, expire_on_commit=False) \u0421\u0443\u0449\u043d\u043e\u0441\u0442\u0438 core \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u043f\u043e \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u0443 DB-first , \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u043d\u0438 \u0441\u043a\u0443\u0447\u043d\u044b\u0435, \u0440\u0430\u0437\u0431\u0435\u0440\u0435\u043c admin \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439: Base = declarative_base() class AbstractBase(Base): __abstract__ = True id: Mapped[pyUUID] = mapped_column(UUID(as_uuid=True), primary_key=True) created_at: Mapped[datetime] = mapped_column( TIMESTAMP, server_default=func.now(), ) updated_at: Mapped[datetime] = mapped_column( TIMESTAMP, server_default=func.now(), onupdate=func.current_timestamp(), ) \u0421\u0443\u0449\u043d\u043e\u0441\u0442\u0438: class User(AbstractBase): __tablename__ = \"users\" email: Mapped[Optional[str]] username: Mapped[str] = mapped_column(unique=True) hashed_password: Mapped[str] organisation_id: Mapped[Optional[pyUUID]] = mapped_column(ForeignKey('courts_organisation.id')) role_id: Mapped[Optional[pyUUID]] = mapped_column(ForeignKey('roles.id')) is_active: Mapped[bool] role: Mapped[Optional['Role']] = relationship(\"Role\", back_populates='users') court_organisation: Mapped[Optional['Organisation']] = relationship(\"Organisation\", back_populates='users') class Organisation(AbstractBase): __tablename__ = \"courts_organisation\" unicort_organization_id: Mapped[int] = mapped_column(unique=True) is_active: Mapped[bool] creator_id: Mapped[pyUUID] users: Mapped[List[User]] = relationship('User', back_populates='court_organisation') class Role(AbstractBase): __tablename__ = \"roles\" name: Mapped[str] description: Mapped[str] court_organisation_id: Mapped[Optional[pyUUID]] = mapped_column(ForeignKey('courts_organisation.id')) permissions: Mapped[dict] = mapped_column(JSONB) is_unicort_staff: Mapped[bool] = mapped_column(default=False) is_superuser: Mapped[bool] = mapped_column(default=False) creator_id: Mapped[Optional[pyUUID]] users: Mapped[List[User]] = relationship(\"User\", back_populates='role')","title":"SQLAlchemy"},{"location":"lab1/#alembic","text":"\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e alembic \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439, \u043d\u043e \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0442\u0435 \u0436\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u0447\u0442\u043e \u0438 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435. \u041a\u043e\u043d\u0435\u0447\u043d\u043e, \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0445\u043e\u0441\u0442\u0430/\u043f\u043e\u0440\u0442\u0430/etc, \u043d\u043e \u044d\u0442\u043e \u0441\u043a\u0443\u0447\u043d\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0439 env.py \u0441 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c alembic \u0441 asyncpg \u0432\u043c\u0435\u0441\u0442\u043e psychopg2 import asyncio from logging.config import fileConfig from alembic import context from sqlalchemy import pool from sqlalchemy.engine import Connection from sqlalchemy.ext.asyncio import async_engine_from_config from infrastructure.admin_db.entities import Base from settings import settings # this is the Alembic Config object, which provides # access to the values within the .ini file in use. config = context.config # Interpret the config file for Python logging. # This line sets up loggers basically. if config.config_file_name is not None: fileConfig(config.config_file_name) # add your model's MetaData object here # for 'autogenerate' support # from myapp import mymodel # target_metadata = mymodel.Base.metadata target_metadata = Base.metadata # other values from the config, defined by the needs of env.py, # can be acquired: # my_important_option = config.get_main_option(\"my_important_option\") # ... etc. config.set_main_option(\"sqlalchemy.url\", settings.admin_db.url) def run_migrations_offline() -> None: \"\"\"Run migrations in 'offline' mode. This configures the context with just a URL and not an Engine, though an Engine is acceptable here as well. By skipping the Engine creation we don't even need a DBAPI to be available. Calls to context.execute() here emit the given string to the script output. \"\"\" url = config.get_main_option(\"sqlalchemy.url\") context.configure( url=url, target_metadata=target_metadata, literal_binds=True, dialect_opts={\"paramstyle\": \"named\"}, ) with context.begin_transaction(): context.run_migrations() def do_run_migrations(connection: Connection) -> None: context.configure(connection=connection, target_metadata=target_metadata) with context.begin_transaction(): context.run_migrations() async def run_async_migrations() -> None: \"\"\"In this scenario we need to create an Engine and associate a connection with the context. \"\"\" connectable = async_engine_from_config( config.get_section(config.config_ini_section, {}), prefix=\"sqlalchemy.\", poolclass=pool.NullPool, ) async with connectable.connect() as connection: await connection.run_sync(do_run_migrations) await connectable.dispose() def run_migrations_online() -> None: \"\"\"Run migrations in 'online' mode.\"\"\" asyncio.run(run_async_migrations()) if context.is_offline_mode(): run_migrations_offline() else: run_migrations_online() \u0422\u0430\u043a\u0436\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0441\u0438\u0434\u0430\u043c\u0438 import logging import subprocess logger = logging.getLogger(__name__) async def apply_migrations(): migrations_is_ok = subprocess.call([\"alembic\", \"upgrade\", \"head\"]) == 0 if not migrations_is_ok: logger.error(\"There is an error while upgrading database\") exit(1)","title":"alembic"},{"location":"lab1/#api","text":"\u0412\u0441\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0432 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0430\u043d\u043d\u043e\u0442\u0438\u0440\u0443\u044e\u0442\u0441\u044f Pydantic-\u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438, \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 swagger \u043d\u0430\u043c \u043a\u0440\u0430\u0439\u043d\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u044f \u043d\u0435 \u0445\u043e\u0447\u0443 \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432\u0441\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430 \u0443\u0441\u0442\u043d\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u044b \u043e\u0442\u0432\u0435\u0442\u043e\u0432. \u0422\u0430\u043a\u0436\u0435 \u043c\u044b \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c camelCase \u0434\u043b\u044f \u043b\u044e\u0431\u043e\u0433\u043e \u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0431\u0435\u043a\u0435\u043d\u0434\u0430 \u0438 \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u0435\u0439 \u0441 Field(alias='...') \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: class UserResponse(BaseModel): id: UUID email: Optional[str] = None username: str organisation_id: Optional[UUID] = Field(None, serialization_alias='organisationId') organisation_name: Optional[str] = Field(None, serialization_alias='organisationName') is_active: bool = Field(..., serialization_alias='isActive') role: Optional[RoleResponse] = None created_at: datetime = Field(..., serialization_alias='createdAt') updated_at: datetime = Field(..., serialization_alias='updatedAt') model_config = ConfigDict(from_attributes=True, populate_by_name=True) \u0420\u0443\u0447\u0435\u043a \u0443 \u043d\u0430\u0441 \u043c\u043d\u043e\u0433\u043e, \u0442\u0430\u043a \u0447\u0442\u043e \u043f\u043e\u043a\u0430\u0436\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430: router = APIRouter( prefix=\"/user\", tags=[\"Users\"], ) logger = logging.getLogger(__name__) @router.get('/me') async def get_me(request: Request) -> UserResponse: user_id = get_user_id_from_request(request) user_service = get_user_service() return UserResponse.model_validate(await user_service.get_me(user_id=user_id)) @router.post('/create') async def create_user( request: Request, new_user: CreateUserRequest, ) -> Annotated[str, 'new user password']: user_id = get_user_id_from_request(request) permission_service = get_permission_service() court = await permission_service.check_create_users_permission(user_id, new_user) user_service = get_user_service() return await user_service.create_user( court_id=court.id if court else None, user=new_user, ) @router.get('/{user_id}') async def get_user( request: Request, user_id: UUID, ) -> UserResponse: request_user_id = get_user_id_from_request(request) permission_service = get_permission_service() organisation = await permission_service.check_get_users_permission(request_user_id) user_service = get_user_service() user = await user_service.get_user( organisation_id=organisation.id if organisation else None, user_id=user_id, ) return UserResponse.model_validate(user) @router.get('') async def get_users( request: Request, page: int = 1, size: int = 10, user_filter: UserFilter = FilterDepends(UserFilter) ) -> List[UserResponse]: request_user_id = get_user_id_from_request(request) permission_service = get_permission_service() organisation = await permission_service.check_get_users_permission(request_user_id) user_service = get_user_service() users = await user_service.get_users( organisation_id=organisation.id if organisation else None, page=page, size=size, user_filter=user_filter ) return [UserResponse.model_validate(user) for user in users] \u0412 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0430\u0442\u0442\u0435\u0440\u043d \"\u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439\", \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u0438\u0440\u0443\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u0411\u0414. \u0422\u0430\u043a, \u0432\u0441\u0435 reationship -\u043f\u043e\u043b\u044f \u043c\u0430\u043f\u043f\u044f\u0442\u0441\u044f \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 pydantic -\u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0441\u043b\u043e\u044f \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0435\u0432. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0435\u0441\u0442\u044c \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438, \u043a\u043e\u0433\u0434\u0430 \u0432 \u043e\u0442\u0432\u0435\u0442\u0435 API \u043d\u0443\u0436\u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0438\u0437 \u043e\u0431\u0435\u0438\u0445 \u0411\u0414/\u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430. \u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043b\u043e\u0436\u0438\u0442\u0441\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0438\u0441\u043d\u044b\u0439 \u0441\u043b\u043e\u0439. \u041f\u0440\u0438\u043c\u0435\u0440: class UnicortBookingResponse(BaseModel): id: int booking_time: datetime = Field(..., serialization_alias='bookingTime') date: Optional[pydate] = None price: float payment_link: Optional[str] = Field(None, serialization_alias='paymentLink') payment_id: Optional[str] = Field(None, serialization_alias='paymentId') order_id: Optional[int] = Field(None, serialization_alias='orderId') booked_by: Annotated[ BookedBy, Field(..., serialization_alias='bookedBy'), EnumNameSerializer ] status: Annotated[Optional[BookingStatus], EnumNameSerializer] = None promocode_id: Optional[int] = Field(None, serialization_alias='promocodeId') organisation_name: str = Field(..., serialization_alias='organisationName') start_time: time = Field(..., serialization_alias='startTime') end_time: time = Field(..., serialization_alias='endTime') users: List[BookingUserResponse] booked_by_user: Optional[BookingUserResponse] = Field(None, serialization_alias='bookedByUser') court_info: Optional[CourtResponse] = Field(None, serialization_alias='courtInfo') model_config = ConfigDict(from_attributes=True, populate_by_name=True) @router.get('/actual') async def get_actual_bookings( request: Request, ) -> list[UnicortBookingResponse]: user_id = get_user_id_from_request(request) permission_service = get_permission_service() court = await permission_service.check_get_bookings_permission(user_id) booking_service = get_booking_service() return await booking_service.get_actual_booking(court, user_id) class UnicortBookingService(UnicortBookingServiceInterface): async def get_actual_booking( self, court: Organisation, user_id: UUID, ) -> list[UnicortBookingResponse]: responses = [] if not court: booking_info = await self.bookings_repository.get_actual_booking() for booking in booking_info: booking_response = self._map_admin_booking(booking) responses.append(booking_response) return responses courts_ids = await self.court_organization_repository.get_courts(court.unicort_organization_id) booking_info = await self.bookings_repository.get_actual_booking_by_court_ids(courts_ids) for booking in booking_info: booking_response = self._map_unicort_booking(booking) responses.append(booking_response) return responses @staticmethod def _map_unicort_booking(booking: Booking) -> UnicortBookingResponse: logger.info(booking.schedules) start_time = min(map(lambda x: x.start_time, booking.schedules)) end_time = max(map(lambda x: x.end_time, booking.schedules)) return UnicortBookingResponse( id=booking.id, booking_time=booking.booking_time, date=booking.date.date(), price=booking.price, payment_link=booking.payment_link, payment_id=booking.payment_id, order_id=booking.order_id, booked_by=booking.booked_by, status=booking.status, promocode_id=booking.promocode_id, users=[ BookingUserResponse.model_validate(user) for user in booking.invited_users or [] ], booked_by_user=BookingUserResponse.model_validate(booking.creator) if booking.creator else None, court_info=CourtResponse.model_validate(booking.schedules[0].court), start_time=start_time, end_time=end_time, organisation_name=booking.court.organisation.name, )","title":"API"},{"location":"lab1/#auth","text":"\u0425\u0435\u0448\u0438\u0440\u0443\u0435\u043c \u043f\u0430\u0440\u043e\u043b\u0438 \u0441 argon2, \u043a\u0440\u0435\u0434\u044b - \u043b\u043e\u0433\u0438\u043d + \u043f\u0430\u0440\u043e\u043b\u044c. \u0422\u0430\u043a \u043a\u0430\u043a \u0440\u0435\u0441\u0443\u0440\u0441 \u043d\u0435\u043f\u0443\u0431\u043b\u0438\u0447\u043d\u044b\u0439, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u0432 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c. \u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0432 \u043e\u0442\u0432\u0435\u0442\u0435, \u0441\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f \u0435\u0449\u0435 \u043d\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 import logging from fastapi import APIRouter, Header, HTTPException from abstractions.services.exceptions import ( NoSuchUserException, WrongCredentialsException, InvalidTokenException, ExpiredTokenException ) from dependencies.services.auth import get_auth_service from domain.dto.auth import AuthTokens, Credentials router = APIRouter( prefix=\"/auth\", tags=[\"Auth\"], ) logger = logging.getLogger(__name__) @router.post('/signin') async def sign_in( credentials: Credentials, ) -> AuthTokens: auth_service = get_auth_service() try: tokens = await auth_service.create_token(credentials) return tokens except (NoSuchUserException, WrongCredentialsException): raise HTTPException(status_code=401, detail=\"\u041e\u0448\u0438\u0431\u043a\u0430: \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0435 \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c\") @router.post('/refresh') async def refresh_tokens( refresh_token: str = Header(alias='X-Refresh-Token'), ) -> AuthTokens: if not refresh_token: raise HTTPException(status_code=401, detail='No refresh token provided') auth_service = get_auth_service() try: new_tokens = await auth_service.refresh_token(refresh_token) return new_tokens except (InvalidTokenException, NoSuchUserException, ExpiredTokenException) as e: code, detail = 401, 'Unknown authorization exception' match e: case InvalidTokenException(): detail = 'Refresh token is invalid' case ExpiredTokenException(): detail = 'Refresh token is expired' case NoSuchUserException(): detail = 'User ID found by refresh token does not exist' logger.info(detail) raise HTTPException(status_code=code, detail=detail) import random import string from dataclasses import dataclass from uuid import UUID from passlib.hash import argon2 from abstractions.repositories.user import UserRepositoryInterface from abstractions.services.auth.service import AuthServiceInterface from abstractions.services.auth.tokens import TokenServiceInterface from abstractions.services.exceptions import ( NoSuchUserException, WrongCredentialsException, ExpiredTokenException, InvalidTokenException, ) from domain.dto.auth import AuthTokens, Credentials from infrastructure.sqlalchemy.exceptions import NotFoundException @dataclass class AuthService(AuthServiceInterface): token_service: TokenServiceInterface user_repository: UserRepositoryInterface async def get_user_id_from_jwt(self, token: str) -> UUID: claims = self.token_service.get_token_payload(token) user_id = claims.get('sub') if not user_id: raise InvalidTokenException try: user = await self.user_repository.get(user_id) except NotFoundException: raise NoSuchUserException if not user.is_active: raise PermissionError(\"Your account has been disabled.\") return user.id async def create_token(self, credentials: Credentials) -> AuthTokens: user = await self.user_repository.get_by_username(username=credentials.username) if not user: raise NoSuchUserException if not self.verify_password(credentials.password, user.hashed_password): raise WrongCredentialsException return self.token_service.create_auth_token(user) async def refresh_token(self, refresh_token: str) -> AuthTokens: try: claims = self.token_service.get_token_payload(refresh_token) user_id = claims.get('sub') if not user_id: raise InvalidTokenException user = await self.user_repository.get(user_id) return self.token_service.create_auth_token(user) except (ExpiredTokenException, InvalidTokenException, NotFoundException): raise InvalidTokenException @staticmethod def hash_password(password: str) -> str: \"\"\" \u0425\u0435\u0448\u0438\u0440\u0443\u0435\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Argon2. :param password: \u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043b\u044f \u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. :return: \u0417\u0430\u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c. \"\"\" return argon2.using(rounds=4).hash(password) @staticmethod def verify_password(password: str, hashed_password: str) -> bool: \"\"\" \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043f\u0430\u0440\u043e\u043b\u044c \u043f\u0440\u043e\u0442\u0438\u0432 \u0437\u0430\u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. :param password: \u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438. :param hashed_password: \u0417\u0430\u0445\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u043e\u043b\u044c. :return: True, \u0435\u0441\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439, \u0438\u043d\u0430\u0447\u0435 False. \"\"\" return argon2.verify(password, hashed_password) @staticmethod def generate_password(length: int = 12) -> str: if length < 4: raise ValueError(\"\u0414\u043b\u0438\u043d\u0430 \u043f\u0430\u0440\u043e\u043b\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 4 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0434\u043b\u044f \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438.\") # \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 categories = [ random.choice(string.ascii_lowercase), # \u041e\u0434\u043d\u0430 \u0441\u0442\u0440\u043e\u0447\u043d\u0430\u044f \u0431\u0443\u043a\u0432\u0430 random.choice(string.ascii_uppercase), # \u041e\u0434\u043d\u0430 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u0430\u044f \u0431\u0443\u043a\u0432\u0430 random.choice(string.digits), # \u041e\u0434\u043d\u0430 \u0446\u0438\u0444\u0440\u0430 random.choice(string.punctuation) # \u041e\u0434\u0438\u043d \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b ] # \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0438\u0437 \u0432\u0441\u0435\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 all_characters = string.ascii_letters + string.digits + string.punctuation categories.extend(random.choice(all_characters) for _ in range(length - 4)) # \u041f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u0435\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0434\u043b\u044f \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f random.shuffle(categories) return ''.join(categories)","title":"AUTH"},{"location":"lab2/","text":"","title":"Lab 2"}]}